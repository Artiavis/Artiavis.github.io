<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>clojure on Just a Blog in the Park</title><link>https://www.justabloginthepark.com/tags/clojure/</link><description>Recent content in clojure on Just a Blog in the Park</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; &lt;a href="https://github.com/Artiavis">Jeff Rabinowitz&lt;/a>, 2020</copyright><lastBuildDate>Wed, 28 Jun 2017 00:20:27 -0400</lastBuildDate><atom:link href="https://www.justabloginthepark.com/tags/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Kotlin the new Java?</title><link>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</link><pubDate>Wed, 28 Jun 2017 00:20:27 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</guid><description>One of the programming languages I&amp;rsquo;ve (essentially) been ignoring for the past couple of years has been Kotlin, the “better Java” from Jetbrains, the author of IntelliJ and other IDE&amp;rsquo;s.1 Recently, Kotlin has come back into focus for me for the following reasons:
Google finally announced official Android support for Kotlin Steve Yegge, that infamously opinionated programming language enthusiast, wrote a patently Yeggian post about how Kotlin scratches his itches without supporting academic or impractical features.</description></item><item><title>Clojure and the Esoteric Mysteries of Namespaces</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</link><pubDate>Sun, 18 Jun 2017 13:12:46 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</guid><description>If you&amp;rsquo;ve ever been programming in Clojure and encountered an error which looks something like, IllegalStateException(&amp;quot;Can't change/establish root binding of: *ns* with set&amp;quot;), read on!
Preface I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s “Vars”. Here is a deep-dive on how they work. This is a two-part series. The previous part of the series is available at Clojure and the Esoteric Mysteries of Vars.</description></item><item><title>Clojure and the Esoteric Mysteries of Vars</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</link><pubDate>Sun, 18 Jun 2017 11:07:02 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</guid><description>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s “Vars”. Here is a deep-dive on how they work. This is a two-part series. The next part of the series is available at Clojure and the Esoteric Mysteries of Namespaces.
Vars: A Simplified Model of Variables One of Clojure&amp;rsquo;s essential motivations is to provide a hosted runtime for easily concurrent programs, wherein most of the challenges of locking and thread-safety are provided “for free” (at least in the sense of the programmer not having to worry about these low-level concepts).</description></item><item><title>Bearish on Clojure in 2017</title><link>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</guid><description>There was a recent brouhaha in the Clojure community about the recent blog post by a Clojure dabbler to the effect that Clojure may be a clean and beautiful language but that it fails in a few pragmatic and ergonomic senses which hurts its adoption and limits its appeal. Although the author admits that he probably made a mistake in jumping to adopt Clojure, a foreign technological concept to him, for a startup in a space that was also completely foreign to him, he does bring up some worthwhile points that are worth chewing over.</description></item><item><title>Switching to Hugo Blogging</title><link>https://www.justabloginthepark.com/2017/06/03/switching-to-hugo-blogging/</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/03/switching-to-hugo-blogging/</guid><description>I recently decided to switch the backend static site compilation toolchain for this blog from the small Cryogen project in Clojure to the venerable Hugo project written in Golang. Although I had previously written that I wanted a hackable static site generator at Returning to Blogging with Cryogen, my requirements lately have changed. I thought I&amp;rsquo;d write a couple of quick notes about why I switched (and why I didn&amp;rsquo;t).</description></item><item><title>Lisp Finally Clicked</title><link>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</guid><description>I&amp;rsquo;ve been meaning to write this post for a couple of weeks now. There is a story told among programming language enthusiasts that programming as an art only “clicks” once a programmer understands the Lisp programming language. I finally feel like I&amp;rsquo;ve reached that point. Although I don&amp;rsquo;t think I&amp;rsquo;m an amazing programmer, I finally feel like I understand the difference between languages (like Python and Lisp), and why Lisp is often considered so much more flexible and powerful (at least in theory) than a language like Python or C.</description></item><item><title>The Clojure “Reductions” Function</title><link>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</guid><description>Tonight, while attempting a problem at 4 Clojure (problem number omitted so as not to give too many hints), I was struck by the following problem:
What if I need a Clojure function which can take a sequence of functions and can sequentially call them on some seed value?
I&amp;rsquo;m specifically looking at something like:
(defn some-fun [seed-val &amp;amp; funs] ; Keep passing the calculated value through, while also appending to sequence (list ((first funs) seed-val) ((second funs) ((first funs) seed-val)) .</description></item><item><title>Clojure Zippers Emulate Object-Oriented Programming?</title><link>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</guid><description>Yesterday, I posted about using Clojure zippers to solve the problem of automatically generating a Table of Contents. During my work with Clojure&amp;rsquo;s implementation of zippers, I noticed something interesting.
The zipper function creates (and returns) a new zipper object. Its parameters are the following (lifted straight from the documentation):
branch? – a function that takes a node of the zipper and returns a true/false if it is capable of having children (even if it currently does not).</description></item><item><title>Implementing a Table of Contents Using Zippers</title><link>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</guid><description>As I continue my forays with Clojure, I&amp;rsquo;m finding it enjoyable (if not entirely productive) to hack with it on Cryogen, a nifty little blog generator I already discussed recently.
On Sunday I had the privilege of making my first pull request. The essence of the PR was to fix a couple of bugs with the existing implementation of the logic for generating a Table of Contents for a given blog post, and also replace a less robust algorithm (for real-life use cases) with a more robust one.</description></item><item><title>F Sharp vs Clojure Toy Problem Shootout</title><link>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</guid><description>As a continuation of my forays in interesting and less industrially-oriented programming languages, I decided to compare F Sharp against Clojure for a relatively simple programming problem, and to compare how the two felt in terms of programming ease, friendliness, and how they each viewed the problem.
The Problem The problem is a relatively one from Reddit&amp;rsquo;s “Daily Programmer” subreddit, called JSON Treasure Hunt: given a random, unstructured JSON object, traverse the object looking for a specific terminal value (in this case, a string &amp;ldquo;dailyprogrammer&amp;rdquo;).</description></item><item><title>Returning to Blogging with Cryogen</title><link>https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/</link><pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/</guid><description>It&amp;rsquo;s been a long while since I last blogged. My last post dates back to April of 2014, shortly before I graduated from Rutgers Engineering. My life since then has been a bit of a whirlwind. I&amp;rsquo;ve since graduated, moved to the Upper West Side, started working in banking, gotten engaged and married, and moved out. I suppose I could be forgiven for not blogging as actively.
Why I Took Down My Old Blog My old blog was running on Ghost, a nifty JavaScript-based modern reimagination of the classic web-based blogging platform.</description></item><item><title>Pros and Cons of Clojure</title><link>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</guid><description>As part of my forays in interesting (and generally unusable at work) programming languages, I began investigating Clojure back in June. Although I really love the language as a whole (and, in fact, I&amp;rsquo;m using it to power this blog!), I struggled not only to set it up, but to find its ideal niche. This essay/rant is a result of a conversation I had about Clojure with two friends, one who is an excellent polyglot programmer, and one who is a beginner simply interested in Clojure as a practical Lisp.</description></item></channel></rss>