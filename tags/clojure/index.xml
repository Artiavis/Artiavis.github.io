<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clojure on Just a Blog in the Park</title><link>https://www.justabloginthepark.com/tags/clojure/</link><description>Recent content in Clojure on Just a Blog in the Park</description><generator>Hugo</generator><language>en-us</language><copyright>&amp;copy; &lt;a href="https://github.com/Artiavis">Jeff Rabinowitz&lt;/a>, 2025</copyright><lastBuildDate>Wed, 28 Jun 2017 00:20:27 -0400</lastBuildDate><atom:link href="https://www.justabloginthepark.com/tags/clojure/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Kotlin the new Java?</title><link>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</link><pubDate>Wed, 28 Jun 2017 00:20:27 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</guid><description>&lt;p>One of the programming languages I&amp;rsquo;ve (essentially) been ignoring for the past
couple of years has been &lt;a href="http://kotlinlang.org/">Kotlin&lt;/a>,
the “better Java” from Jetbrains,
the author of IntelliJ and other IDE&amp;rsquo;s.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
Recently, Kotlin has come back into focus for me for the following reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/kotlin/index.html">Google finally announced official Android support for Kotlin&lt;/a>&lt;/li>
&lt;li>Steve Yegge, that infamously opinionated programming language enthusiast,
&lt;a href="http://steve-yegge.blogspot.com/2017/05/why-kotlin-is-better-than-whatever-dumb.html">wrote a patently Yeggian post about how Kotlin scratches his itches&lt;/a>
without supporting academic or impractical features.&lt;/li>
&lt;li>I began to tire (after only a handful of months!!) of diligently reminding my
colleagues to prefer &lt;a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">Guava Immutable collections&lt;/a>
over Java collections,
&lt;a href="https://projectlombok.org/features/Value">Lombok&lt;/a>/&lt;a href="https://immutables.github.io/">Immutables&lt;/a> over hand-rolled POJO&amp;rsquo;s, and
&lt;a href="https://stackoverflow.com/questions/13484202/how-to-use-nullable-and-nonnull-annotations-more-effectively">to please please use the &lt;code>@Nullable&lt;/code> and &lt;code>@Nonnull&lt;/code> annotations&lt;/a>
or at the very least &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">&lt;code>java.util.Optional&lt;/code>&lt;/a>
instead of returning ambiguous types (such as empty/nullable/possibly full collections of possibly null values).&lt;/li>
&lt;/ul>
&lt;h3 id="some-features-need-to-exist-at-the-language-level">Some features need to exist at the language level&lt;/h3>
&lt;p>To paraphrase Jeff Bezos,&lt;/p></description></item><item><title>Clojure and the Esoteric Mysteries of Namespaces</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</link><pubDate>Sun, 18 Jun 2017 13:12:46 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</guid><description>&lt;p>If you&amp;rsquo;ve ever been programming in Clojure and encountered an error which looks
something like, &lt;code>IllegalStateException(&amp;quot;Can't change/establish root binding of: *ns* with set&amp;quot;)&lt;/code>,
read on!&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces
function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s
“&lt;code>Var&lt;/code>s”. Here is a deep-dive on how they work. This is a two-part
series.
The previous part of the series is available at
&lt;a href="https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/">Clojure and the Esoteric Mysteries of Vars&lt;/a>.&lt;/p></description></item><item><title>Clojure and the Esoteric Mysteries of Vars</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</link><pubDate>Sun, 18 Jun 2017 11:07:02 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</guid><description>&lt;p>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces
function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s
“&lt;code>Var&lt;/code>s”. Here is a deep-dive on how they work. This is a two-part
series. The next part of the series is available at
&lt;a href="https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/">Clojure and the Esoteric Mysteries of Namespaces&lt;/a>.&lt;/p>
&lt;h2 id="vars-a-simplified-model-of-variables">Vars: A Simplified Model of Variables&lt;/h2>
&lt;p>One of Clojure&amp;rsquo;s essential motivations is to provide a hosted runtime for
easily concurrent programs, wherein most of the challenges of locking and
thread-safety are provided “for free” (at least in the sense of
the programmer not having to worry about these low-level concepts). To that end,
Clojure implements its variables differently than most other languages.&lt;/p></description></item><item><title>Bearish on Clojure in 2017</title><link>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</guid><description>&lt;p>There was a recent brouhaha in the Clojure community about
&lt;a href="https://lambdaisland.com/blog/25-05-2017-simple-and-happy-is-clojure-dying-and-what-has-ruby-got-to-do-with-it">the recent blog post&lt;/a>
by a Clojure dabbler to the effect that Clojure may be a clean and beautiful language
but that it fails in a few pragmatic and ergonomic senses which hurts its adoption
and limits its appeal. Although the author admits that he probably made a mistake
in jumping to adopt Clojure, a foreign technological concept to him,
for a startup in a space that was also completely foreign to him, he does bring
up some worthwhile points that are worth chewing over.&lt;/p></description></item><item><title>Switching to Hugo Blogging</title><link>https://www.justabloginthepark.com/2017/06/03/switching-to-hugo-blogging/</link><pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/03/switching-to-hugo-blogging/</guid><description>&lt;p>I recently decided to switch the backend static site compilation toolchain for
this blog from the small &lt;a href="https://github.com/cryogen-project/cryogen">Cryogen project&lt;/a>
in &lt;a href="https://clojure.org/">Clojure&lt;/a> to the venerable &lt;a href="https://gohugo.io/">Hugo&lt;/a>
project written in &lt;a href="https://golang.org/">Golang&lt;/a>. Although I had previously
written that I wanted a hackable static site generator at
&lt;a href="https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/">Returning to Blogging with Cryogen&lt;/a>,
my requirements lately have changed.
I thought I&amp;rsquo;d write a couple of quick notes about why I switched (and why I didn&amp;rsquo;t).&lt;/p>
&lt;h3 id="hackabletoolchain--maintainabletoolchain">hackableToolchain &amp;lt;&amp;lt; maintainableToolchain&lt;/h3>
&lt;p>An easily hackable blog generator became less valueable to me than a robust and well
maintained one. Although it was nice getting to contribute code to Cryogen and to
make a difference, and to be able to understand the code base, the value of established
and battle-tested code is something I ignored at the time. (I knew it was a factor,
but at the time I just wanted to get rolling quickly. These days I&amp;rsquo;d rather have
something that works on its own.)&lt;/p></description></item><item><title>Lisp Finally Clicked</title><link>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</guid><description>&lt;p>I&amp;rsquo;ve been meaning to write this post for a couple of weeks now.
There is a story told among programming language enthusiasts that
programming as an art only “clicks” once a programmer understands
the Lisp programming language.
I finally feel like I&amp;rsquo;ve reached that point.
Although I don&amp;rsquo;t think I&amp;rsquo;m an amazing
programmer, I finally feel like I understand the difference between
languages (like Python and Lisp), and why Lisp is often considered
so much more flexible
and powerful (at least in theory) than a language like Python or C.
(For reference, see any of Paul Graham&amp;rsquo;s somewhat self-assured arguments
about Lisp. &lt;a href="http://www.paulgraham.com/avg.html">I like his Blub essay the most.&lt;/a>).&lt;/p></description></item><item><title>The Clojure “Reductions” Function</title><link>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</guid><description>&lt;p>Tonight, while attempting a problem at &lt;a href="http://www.4clojure.com">4 Clojure&lt;/a>
(problem number omitted so as not to give too many hints),
I was struck by the following problem:&lt;/p>
&lt;blockquote>
&lt;p>What if I need a Clojure function which can take a sequence of functions
and can sequentially call them on some seed value?&lt;/p>&lt;/blockquote>
&lt;p>I&amp;rsquo;m specifically looking at something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">defn &lt;/span>some-fun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [seed-val &lt;span style="color:#f92672">&amp;amp;&lt;/span> funs]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; Keep passing the calculated value through, while also appending to sequence&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (list ((first funs) seed-val) ((second funs) ((first funs) seed-val)) ...))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I ended up hacking something together using
&lt;a href="https://clojuredocs.org/clojure.core/iterate">&lt;code>iterate&lt;/code>&lt;/a>,
but which wasn&amp;rsquo;t
terribly elegant.&lt;/p></description></item><item><title>Clojure Zippers Emulate Object-Oriented Programming?</title><link>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</guid><description>&lt;p>Yesterday, I posted about using Clojure
&lt;a href="http://clojuredocs.org/clojure.zip/zipper">zippers&lt;/a>
to solve the problem of automatically generating a Table of Contents.
During my work with Clojure&amp;rsquo;s implementation of zippers, I noticed something
interesting.&lt;/p>
&lt;p>The &lt;code>zipper&lt;/code> function creates (and returns) a new zipper object. Its parameters
are the following (lifted straight from the documentation):&lt;/p>
&lt;ol>
&lt;li>&lt;code>branch?&lt;/code> – a function that takes a node of the zipper and returns a
true/false if it is capable of having children (even if it currently
does not).&lt;/li>
&lt;li>&lt;code>children&lt;/code> – a function which, given a node in the zipper which is a
branch, returns a &lt;code>seq&lt;/code> (sequence) of its children.&lt;/li>
&lt;li>&lt;code>make-node&lt;/code> – a function which, given a node and a sequence of its
children, returns a new branch node with the supplied children.&lt;/li>
&lt;li>&lt;code>root&lt;/code> – the root node of the data structure (which can also be
any valid tree that the zipper to be constructed understands).&lt;/li>
&lt;/ol>
&lt;p>At first, this was a bit impenetrable. Why doesn&amp;rsquo;t the zipper just know how
to zip over its data? How many types of zippers are there, exactly?&lt;/p></description></item><item><title>Implementing a Table of Contents Using Zippers</title><link>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</guid><description>&lt;p>As I continue my forays with Clojure, I&amp;rsquo;m finding it enjoyable (if not entirely
productive) to hack with it on
&lt;a href="https://github.com/cryogen-project/cryogen">Cryogen&lt;/a>, a nifty little
blog generator
&lt;a href="https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/">I already discussed recently&lt;/a>.&lt;/p>
&lt;p>On Sunday I had the privilege
&lt;a href="https://github.com/cryogen-project/cryogen-core/pull/51">of making my first pull request&lt;/a>.
The essence of the PR was to fix a
&lt;a href="https://github.com/cryogen-project/cryogen/issues/62">couple of bugs&lt;/a>
with the existing implementation of the logic for generating a Table
of Contents for a given blog post, and also replace a less robust
algorithm (for real-life use cases) with a more robust one.&lt;/p></description></item><item><title>F Sharp vs Clojure Toy Problem Shootout</title><link>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</guid><description>&lt;p>As a continuation of my forays in interesting and less industrially-oriented
programming languages, I decided to compare
&lt;a href="fsharp.org">F Sharp&lt;/a>
against &lt;a href="clojure.org">Clojure&lt;/a> for a relatively simple programming
problem, and to compare how the two felt in terms of programming ease,
friendliness, and how they each viewed the problem.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>The problem is a relatively one from
&lt;a href="https://reddit.com/r/dailyprogrammer">Reddit&amp;rsquo;s “Daily Programmer” subreddit&lt;/a>, called
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/3j3pvm/20150831_challenge_230_easy_json_treasure_hunt/">JSON Treasure Hunt&lt;/a>:
given a random, unstructured JSON object, traverse the object looking for
a specific terminal value (in this case, a string &amp;ldquo;dailyprogrammer&amp;rdquo;).
This is, of course, an unstructured tree traversal question.&lt;/p></description></item><item><title>Returning to Blogging with Cryogen</title><link>https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/</link><pubDate>Sat, 24 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/</guid><description>&lt;p>It&amp;rsquo;s been a long while since I last blogged. My last post dates back to
April of 2014, shortly before I graduated from Rutgers Engineering.
My life since then has been a bit of a whirlwind. I&amp;rsquo;ve since graduated,
moved to the Upper West Side, started working in banking, gotten engaged
and married, and moved out. I suppose I could be forgiven for not blogging
as actively.&lt;/p>
&lt;h2 id="why-i-took-down-my-old-blog">Why I Took Down My Old Blog&lt;/h2>
&lt;p>My old blog was running on &lt;a href="ghost.org">Ghost&lt;/a>, a nifty JavaScript-based
modern reimagination of the classic web-based blogging platform. Ghost
has some gorgeous themes, a svelte editing experience, and seems poised
to be the next generation of blogging platforms. It seems great. Why
did I leave it behind?&lt;/p></description></item><item><title>Pros and Cons of Clojure</title><link>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</guid><description>&lt;p>As part of my forays in interesting (and generally unusable at work)
programming languages, I began investigating
&lt;a href="clojure.org">Clojure&lt;/a> back in June. Although I really love the
language as a whole (and, in fact, I&amp;rsquo;m using it to power this blog!),
I struggled not only to set it up, but to find its ideal niche.
This essay/rant is a result of a conversation I had about Clojure with
two friends, one who is an excellent polyglot programmer, and one
who is a beginner simply interested in Clojure as a practical Lisp.&lt;/p></description></item></channel></rss>