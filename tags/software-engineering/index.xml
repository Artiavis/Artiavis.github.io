<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Engineering on Just a Blog in the Park</title><link>http://justabloginthepark.com/tags/software-engineering/</link><description>Recent content in Software Engineering on Just a Blog in the Park</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; &lt;a href=&#34;https://github.com/Artiavis&#34;&gt;Jeff Rabinowitz&lt;/a&gt;, 2018</copyright><lastBuildDate>Sat, 17 Mar 2018 23:50:00 -0400</lastBuildDate><atom:link href="http://justabloginthepark.com/tags/software-engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>Review: Java Concurrency in Practice</title><link>http://justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</link><pubDate>Sat, 17 Mar 2018 23:50:00 -0400</pubDate><guid>http://justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</guid><description>I was recently assigned to a new project at work, which requires some concurrent programming. I&amp;rsquo;ve long put off investing in any formal Java programming texts, partly out of thriftiness and partially because none of the professional programming I&amp;rsquo;ve done to date required a formal education/reading of relevant texts to avoid writing completely incorrect code. Usually in line-of-business application development, a sub-optimal solution is not completely incorrect; at worst, it wastes CPU cycles.</description></item><item><title>How Programming is Like Cooking</title><link>http://justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>http://justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</guid><description>Peter Naur, famous in the programming world for his contributions to ALGOL and the Backus-Naur Form (BNF) notation for expressing grammars, passed away last week. (For those who are not in the programming world, ALGOL&amp;rsquo;s grammatical syntax inspired most of today&amp;rsquo;s most popular programming languages, like C, C++, Java, and Python). As a very young millennial programmer, I&amp;rsquo;d of course heard Naur&amp;rsquo;s name from the BNF notation, but didn&amp;rsquo;t really get to appreciate just how prescient his work was at the time.</description></item><item><title>Software Engineering and Computer Science</title><link>http://justabloginthepark.com/2013/12/24/software-engineering-and-computer-science/</link><pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate><guid>http://justabloginthepark.com/2013/12/24/software-engineering-and-computer-science/</guid><description>I&amp;rsquo;m planning on this post being the first in a series about my na√Øve thoughts about the significance of Software Engineering as an undergraduate with little so-called real-world experience. Stay tuned for followup posts, which I&amp;rsquo;ll post back here.
For the past several decades, computer programming has been done in special programming languages which can be either interpreted or compiled (translated) into a form which is natively comprehensible to computers (known as machine code).</description></item></channel></rss>