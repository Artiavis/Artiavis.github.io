<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Just a Blog in the Park</title>
    <link>www.justabloginthepark.com/tags/java/</link>
    <description>Recent content in java on Just a Blog in the Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://github.com/Artiavis&#34;&gt;Jeff Rabinowitz&lt;/a&gt;, 2019</copyright>
    <lastBuildDate>Sat, 17 Mar 2018 23:50:00 -0400</lastBuildDate>
    
	<atom:link href="www.justabloginthepark.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Review: Java Concurrency in Practice</title>
      <link>www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</link>
      <pubDate>Sat, 17 Mar 2018 23:50:00 -0400</pubDate>
      
      <guid>www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</guid>
      <description>I was recently assigned to a new project at work, which requires some concurrent programming. I&amp;rsquo;ve long put off investing in any formal Java programming texts, partly out of thriftiness and partially because none of the professional programming I&amp;rsquo;ve done to date required a formal education/reading of relevant texts to avoid writing completely incorrect code. Usually in line-of-business application development, a sub-optimal solution is not completely incorrect; at worst, it wastes CPU cycles.</description>
    </item>
    
    <item>
      <title>Why Kotlin Over Lombok?</title>
      <link>www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</link>
      <pubDate>Sat, 23 Dec 2017 21:47:01 -0500</pubDate>
      
      <guid>www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</guid>
      <description>This is a continuation of the ideas from &amp;ldquo;Is Kotlin the New Java?&amp;rdquo;.
What is Lombok? For those of you who are not familiar, Project Lombok is a build tool for the Java programming language, which adds nifty capabilities that many Java developers feel they sorely lack. Some of the more vanilla features include:
 &amp;ldquo;Getter&amp;rdquo; and &amp;ldquo;Setter&amp;rdquo; generators &amp;ldquo;ToString&amp;rdquo; and &amp;ldquo;EqualsAndHashCode&amp;rdquo; generators &amp;ldquo;Data&amp;rdquo; and &amp;ldquo;Value&amp;rdquo; class generators Automatic resource cleanup Not-Null assertions Builder class generators Constructor helpers of various sorts  There&amp;rsquo;s also a few more exotic features (which I personally have not seen developers) use in the wild, but which no doubt someone is using, including suppressing checked exceptions, lazy fields, magic &amp;ldquo;val&amp;rdquo; keyword, delegation, &amp;ldquo;with&amp;rdquo;ers, util and helper classes.</description>
    </item>
    
    <item>
      <title>Is Kotlin the new Java?</title>
      <link>www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</link>
      <pubDate>Wed, 28 Jun 2017 00:20:27 -0400</pubDate>
      
      <guid>www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</guid>
      <description>One of the programming languages I&amp;rsquo;ve (essentially) been ignoring for the past couple of years has been Kotlin, the &amp;ldquo;better Java&amp;rdquo; from Jetbrains, the author of IntelliJ and other IDE&amp;rsquo;s.1 Recently, Kotlin has come back into focus for me for the following reasons:
 Google finally announced official Android support for Kotlin Steve Yegge, that infamously opinionated programming language enthusiast, wrote a patently Yeggian post about how Kotlin scratches his itches without supporting academic or impractical features.</description>
    </item>
    
  </channel>
</rss>