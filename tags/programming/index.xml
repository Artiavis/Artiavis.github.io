<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Just a Blog in the Park</title><link>https://www.justabloginthepark.com/tags/programming/</link><description>Recent content in programming on Just a Blog in the Park</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; &lt;a href="https://github.com/Artiavis">Jeff Rabinowitz&lt;/a>, 2020</copyright><lastBuildDate>Sun, 02 Feb 2020 22:00:00 -0500</lastBuildDate><atom:link href="https://www.justabloginthepark.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Recommended Programming Languages for High School Students</title><link>https://www.justabloginthepark.com/2020/02/02/recommended-programming-languages-for-high-school-students/</link><pubDate>Sun, 02 Feb 2020 22:00:00 -0500</pubDate><guid>https://www.justabloginthepark.com/2020/02/02/recommended-programming-languages-for-high-school-students/</guid><description>Disclaimer: All opinions expressed herein are my own and don&amp;rsquo;t necessarily reflect that of my employer. Caveat: I hold these opinions and make these recommendations specifically with respect to high school students (or casual hobbyists).
I have a friend in my neighborhood who teaches high school computer science. When she happened to mention that she was trying a new curriculum for one of her classes, I asked her which programming language she was planning to use in her class.</description></item><item><title>Tiny Talk in Scheme</title><link>https://www.justabloginthepark.com/2019/06/02/tiny-talk-in-scheme/</link><pubDate>Sun, 02 Jun 2019 18:07:26 -0400</pubDate><guid>https://www.justabloginthepark.com/2019/06/02/tiny-talk-in-scheme/</guid><description>A while back, I started tinkering with a new flavor of Lisp (for me): Scheme, using the ChezScheme dialect. A Scheme-compliant Lisp is one which (among some other bits) implements a faily minimal set of functions/macros; simple string manipulations, data structures and compound data types, basic math and I/O, and a fairly sophisticated function definition, error handling, and hygienic macro facility (a full summary of the language spec can be found here).</description></item><item><title>Review: Java Concurrency in Practice</title><link>https://www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</link><pubDate>Sat, 17 Mar 2018 23:50:00 -0400</pubDate><guid>https://www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</guid><description>I was recently assigned to a new project at work, which requires some concurrent programming. I&amp;rsquo;ve long put off investing in any formal Java programming texts, partly out of thriftiness and partially because none of the professional programming I&amp;rsquo;ve done to date required a formal education/reading of relevant texts to avoid writing completely incorrect code. Usually in line-of-business application development, a sub-optimal solution is not completely incorrect; at worst, it wastes CPU cycles.</description></item><item><title>Why Kotlin Over Lombok?</title><link>https://www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</link><pubDate>Sat, 23 Dec 2017 21:47:01 -0500</pubDate><guid>https://www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</guid><description>This is a continuation of the ideas from &amp;ldquo;Is Kotlin the New Java?&amp;quot;.
What is Lombok? For those of you who are not familiar, Project Lombok is a build tool for the Java programming language, which adds nifty capabilities that many Java developers feel they sorely lack. Some of the more vanilla features include:
&amp;ldquo;Getter&amp;rdquo; and &amp;ldquo;Setter&amp;rdquo; generators &amp;ldquo;ToString&amp;rdquo; and &amp;ldquo;EqualsAndHashCode&amp;rdquo; generators &amp;ldquo;Data&amp;rdquo; and &amp;ldquo;Value&amp;rdquo; class generators Automatic resource cleanup Not-Null assertions Builder class generators Constructor helpers of various sorts There&amp;rsquo;s also a few more exotic features (which I personally have not seen developers) use in the wild, but which no doubt someone is using, including suppressing checked exceptions, lazy fields, magic &amp;ldquo;val&amp;rdquo; keyword, delegation, &amp;ldquo;with&amp;quot;ers, util and helper classes.</description></item><item><title>Is Kotlin the new Java?</title><link>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</link><pubDate>Wed, 28 Jun 2017 00:20:27 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</guid><description>One of the programming languages I&amp;rsquo;ve (essentially) been ignoring for the past couple of years has been Kotlin, the “better Java” from Jetbrains, the author of IntelliJ and other IDE&amp;rsquo;s.1 Recently, Kotlin has come back into focus for me for the following reasons:
Google finally announced official Android support for Kotlin Steve Yegge, that infamously opinionated programming language enthusiast, wrote a patently Yeggian post about how Kotlin scratches his itches without supporting academic or impractical features.</description></item><item><title>Clojure and the Esoteric Mysteries of Namespaces</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</link><pubDate>Sun, 18 Jun 2017 13:12:46 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</guid><description>If you&amp;rsquo;ve ever been programming in Clojure and encountered an error which looks something like, IllegalStateException(&amp;quot;Can't change/establish root binding of: *ns* with set&amp;quot;), read on!
Preface I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s “Vars”. Here is a deep-dive on how they work. This is a two-part series. The previous part of the series is available at Clojure and the Esoteric Mysteries of Vars.</description></item><item><title>Clojure and the Esoteric Mysteries of Vars</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</link><pubDate>Sun, 18 Jun 2017 11:07:02 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</guid><description>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s “Vars”. Here is a deep-dive on how they work. This is a two-part series. The next part of the series is available at Clojure and the Esoteric Mysteries of Namespaces.
Vars: A Simplified Model of Variables One of Clojure&amp;rsquo;s essential motivations is to provide a hosted runtime for easily concurrent programs, wherein most of the challenges of locking and thread-safety are provided “for free” (at least in the sense of the programmer not having to worry about these low-level concepts).</description></item><item><title>Bearish on Clojure in 2017</title><link>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</guid><description>There was a recent brouhaha in the Clojure community about the recent blog post by a Clojure dabbler to the effect that Clojure may be a clean and beautiful language but that it fails in a few pragmatic and ergonomic senses which hurts its adoption and limits its appeal. Although the author admits that he probably made a mistake in jumping to adopt Clojure, a foreign technological concept to him, for a startup in a space that was also completely foreign to him, he does bring up some worthwhile points that are worth chewing over.</description></item><item><title>Switching to Spacemacs As My Default Editor</title><link>https://www.justabloginthepark.com/2016/10/02/switching-to-spacemacs-as-my-default-editor/</link><pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/10/02/switching-to-spacemacs-as-my-default-editor/</guid><description>I recently began to use Emacs as my default text editor for most things, having switched from Sublime Text. Specifically, I&amp;rsquo;m using the brilliant Spacemacs project, which can best be described as a fairly comprehensive set of sensible defaults and plugins for Emacs with a clever plugin architecture.
I used to be a casual VIM user for remote file editing and a Sublime Text user for local editing (with plugins). However, neither of these solutions truly satisfied me.</description></item><item><title>Lisp Finally Clicked</title><link>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</guid><description>I&amp;rsquo;ve been meaning to write this post for a couple of weeks now. There is a story told among programming language enthusiasts that programming as an art only “clicks” once a programmer understands the Lisp programming language. I finally feel like I&amp;rsquo;ve reached that point. Although I don&amp;rsquo;t think I&amp;rsquo;m an amazing programmer, I finally feel like I understand the difference between languages (like Python and Lisp), and why Lisp is often considered so much more flexible and powerful (at least in theory) than a language like Python or C.</description></item><item><title>How Programming is Like Cooking</title><link>https://www.justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</guid><description>Peter Naur, famous in the programming world for his contributions to ALGOL and the Backus-Naur Form (BNF) notation for expressing grammars, passed away last week. (For those who are not in the programming world, ALGOL&amp;rsquo;s grammatical syntax inspired most of today&amp;rsquo;s most popular programming languages, like C, C++, Java, and Python). As a very young millennial programmer, I&amp;rsquo;d of course heard Naur&amp;rsquo;s name from the BNF notation, but didn&amp;rsquo;t really get to appreciate just how prescient his work was at the time.</description></item><item><title>IaaS and PaaS Explained: A Food Analogy</title><link>https://www.justabloginthepark.com/2015/11/22/iaas-and-paas-explained-a-food-analogy/</link><pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/22/iaas-and-paas-explained-a-food-analogy/</guid><description>The other night, I was meditating about my various options for deploying applications at work, including “Infrastructure as a Service” (IaaS) and “Platform as a Service” (PaaS). Amidst my musing, I came up with an analogy for explaining the difference between these various ways of deploying programming solutions, in addition to the much more conventional approaches which were used formerly (and are often still necessary).
The Analogy Suppose you want to get into the food services industry.</description></item><item><title>The Clojure “Reductions” Function</title><link>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</guid><description>Tonight, while attempting a problem at 4 Clojure (problem number omitted so as not to give too many hints), I was struck by the following problem:
What if I need a Clojure function which can take a sequence of functions and can sequentially call them on some seed value?
I&amp;rsquo;m specifically looking at something like:
(defn some-fun [seed-val &amp;amp; funs] ; Keep passing the calculated value through, while also appending to sequence (list ((first funs) seed-val) ((second funs) ((first funs) seed-val)) .</description></item><item><title>Clojure Zippers Emulate Object-Oriented Programming?</title><link>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</guid><description>Yesterday, I posted about using Clojure zippers to solve the problem of automatically generating a Table of Contents. During my work with Clojure&amp;rsquo;s implementation of zippers, I noticed something interesting.
The zipper function creates (and returns) a new zipper object. Its parameters are the following (lifted straight from the documentation):
branch? – a function that takes a node of the zipper and returns a true/false if it is capable of having children (even if it currently does not).</description></item><item><title>Coding: Debugging the Gender Gap</title><link>https://www.justabloginthepark.com/2015/11/05/coding-debugging-the-gender-gap/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/coding-debugging-the-gender-gap/</guid><description>On Monday, I had the chance to view a private screening of the newish documentary “Code: Debugging the Gender Gap”. The premise of the documentary, lifted straight from IMDB:
CODE documentary exposes the dearth of female and minority software engineers and explores the reasons for this gender gap and digital divide. The film highlights breakthrough efforts that are producing more diverse programmers and shows how this critical gap can be closed.</description></item><item><title>Implementing a Table of Contents Using Zippers</title><link>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</guid><description>As I continue my forays with Clojure, I&amp;rsquo;m finding it enjoyable (if not entirely productive) to hack with it on Cryogen, a nifty little blog generator I already discussed recently.
On Sunday I had the privilege of making my first pull request. The essence of the PR was to fix a couple of bugs with the existing implementation of the logic for generating a Table of Contents for a given blog post, and also replace a less robust algorithm (for real-life use cases) with a more robust one.</description></item><item><title>F Sharp vs Clojure Toy Problem Shootout</title><link>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</guid><description>As a continuation of my forays in interesting and less industrially-oriented programming languages, I decided to compare F Sharp against Clojure for a relatively simple programming problem, and to compare how the two felt in terms of programming ease, friendliness, and how they each viewed the problem.
The Problem The problem is a relatively one from Reddit&amp;rsquo;s “Daily Programmer” subreddit, called JSON Treasure Hunt: given a random, unstructured JSON object, traverse the object looking for a specific terminal value (in this case, a string &amp;ldquo;dailyprogrammer&amp;rdquo;).</description></item><item><title>Pros and Cons of Clojure</title><link>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</guid><description>As part of my forays in interesting (and generally unusable at work) programming languages, I began investigating Clojure back in June. Although I really love the language as a whole (and, in fact, I&amp;rsquo;m using it to power this blog!), I struggled not only to set it up, but to find its ideal niche. This essay/rant is a result of a conversation I had about Clojure with two friends, one who is an excellent polyglot programmer, and one who is a beginner simply interested in Clojure as a practical Lisp.</description></item><item><title>Multiple Cores and Multithreading</title><link>https://www.justabloginthepark.com/2014/03/09/multiple-cores-and-multithreading/</link><pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2014/03/09/multiple-cores-and-multithreading/</guid><description>Have you ever seen advertisements for the latest computers which promote fancy processors with multi-core processors and wonder exactly the advantage of having multiple cores is?
The most tempting explanation, although perhaps too simplistic, is that “more is better”. The most common mistake is thinking that n cores must run programs n times faster than one core, ie a four core processor is approximately four times faster than a single-core processor.</description></item><item><title>The Eigenfacebook</title><link>https://www.justabloginthepark.com/2013/11/19/the-eigenfacebook/</link><pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2013/11/19/the-eigenfacebook/</guid><description>The end of the fall semester is always a very special time of year. The hubbub of plans for winter break are omnipresent, festive lights illuminate themselves around campus, and most importantly of all, professors finally get around to assigning all their term projects with scarcely three weeks left with which to complete them. This isn&amp;rsquo;t news to my fellow upperclassmen, although the sophomores may only just begin to experience this for the first time.</description></item></channel></rss>