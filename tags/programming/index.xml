<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Just a Blog in the Park</title><link>https://www.justabloginthepark.com/tags/programming/</link><description>Recent content in Programming on Just a Blog in the Park</description><generator>Hugo</generator><language>en-us</language><copyright>&amp;copy; &lt;a href="https://github.com/Artiavis">Jeff Rabinowitz&lt;/a>, 2025</copyright><lastBuildDate>Sun, 02 Feb 2020 22:00:00 -0500</lastBuildDate><atom:link href="https://www.justabloginthepark.com/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Recommended Programming Languages for High School Students</title><link>https://www.justabloginthepark.com/2020/02/02/recommended-programming-languages-for-high-school-students/</link><pubDate>Sun, 02 Feb 2020 22:00:00 -0500</pubDate><guid>https://www.justabloginthepark.com/2020/02/02/recommended-programming-languages-for-high-school-students/</guid><description>&lt;p>&lt;em>&lt;strong>Disclaimer&lt;/strong>: All opinions expressed herein are my own and don&amp;rsquo;t necessarily
reflect that of my employer.&lt;/em>
&lt;em>&lt;strong>Caveat&lt;/strong>: I hold these opinions and make these recommendations specifically
with respect to high school students (or casual hobbyists).&lt;/em>&lt;/p>
&lt;p>I have a friend in my neighborhood who teaches high school computer science.
When she happened to mention that she was trying a new curriculum for one of
her classes, I asked her which programming language she was planning to use
in her class. She said that she hadn&amp;rsquo;t quite decided yet, but was leaning
towards JavaScript, because it&amp;rsquo;s ubiquitous and (importantly!) runs well on her
school&amp;rsquo;s Chromebook machines.
Upon hearing that she was favoring JavaScript,
I ran my mouth and
recommend that she instead consider Python.
Based on my professional experience with both JavaScript and Python,
I feel comfortable stating that JavaScript has quite a few pitfalls in terms of
learning, and has a non-trivial path to writing high-quality code.
I also feel comfortable stating that Python has a number of educational virtues,
and has a fairly strong path for students to learn to write high-quality code.&lt;/p></description></item><item><title>Tiny Talk in Scheme</title><link>https://www.justabloginthepark.com/2019/06/02/tiny-talk-in-scheme/</link><pubDate>Sun, 02 Jun 2019 18:07:26 -0400</pubDate><guid>https://www.justabloginthepark.com/2019/06/02/tiny-talk-in-scheme/</guid><description>&lt;p>A while back, I started tinkering with a new flavor of Lisp (for me):
&lt;a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme&lt;/a>,
using the
&lt;a href="https://cisco.github.io/ChezScheme/">ChezScheme&lt;/a>
dialect.
A Scheme-compliant Lisp is one which (among some other bits) implements a faily
minimal set of functions/macros; simple string manipulations, data
structures and compound data types, basic math and I/O,
and a fairly sophisticated function definition, error handling, and hygienic macro facility
(a full summary of the language spec can be found &lt;a href="https://www.scheme.com/tspl4/summary.html#./summary:h0">here&lt;/a>).
I chose Chez Scheme because of its fascinating heritage as an industrial-strengh
production-ready Scheme dialect, and because it seemed more traditional (being fully self-hosted);
but that&amp;rsquo;s a conversation for another post.&lt;/p></description></item><item><title>Review: Java Concurrency in Practice</title><link>https://www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</link><pubDate>Sat, 17 Mar 2018 23:50:00 -0400</pubDate><guid>https://www.justabloginthepark.com/2018/03/17/review-java-concurrency-in-practice/</guid><description>&lt;p>I was recently assigned to a new project at work, which requires some concurrent
programming. I&amp;rsquo;ve long put off investing in any formal Java programming texts,
partly out of thriftiness and partially because none of the professional
programming I&amp;rsquo;ve done to date required a formal education/reading of relevant
texts to avoid writing completely incorrect code. Usually in line-of-business
application development, a sub-optimal solution is not &lt;em>completely incorrect&lt;/em>;
at worst, it wastes CPU cycles. However, when it comes to concurrent programming,
there&amp;rsquo;s three options:&lt;/p></description></item><item><title>Why Kotlin Over Lombok?</title><link>https://www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</link><pubDate>Sat, 23 Dec 2017 21:47:01 -0500</pubDate><guid>https://www.justabloginthepark.com/2017/12/23/why-kotlin-over-lombok/</guid><description>&lt;p>This is a continuation of the ideas from &lt;a href="https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/">&amp;ldquo;Is Kotlin the New Java?&amp;rdquo;&lt;/a>.&lt;/p>
&lt;h2 id="what-is-lombok">What is Lombok?&lt;/h2>
&lt;p>For those of you who are not familiar,
&lt;a href="https://projectlombok.org/features/all">Project Lombok&lt;/a> is a build tool for the
Java programming language, which adds nifty capabilities that many Java developers
feel they sorely lack. Some of the more vanilla features include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://projectlombok.org/features/GetterSetter">&amp;ldquo;Getter&amp;rdquo; and &amp;ldquo;Setter&amp;rdquo; generators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/ToString">&amp;ldquo;ToString&amp;rdquo;&lt;/a> and &lt;a href="https://projectlombok.org/features/EqualsAndHashCode">&amp;ldquo;EqualsAndHashCode&amp;rdquo;&lt;/a> generators&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/Data">&amp;ldquo;Data&amp;rdquo;&lt;/a> and &lt;a href="https://projectlombok.org/features/Value">&amp;ldquo;Value&amp;rdquo;&lt;/a> class generators&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/Cleanup">Automatic resource cleanup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/NonNull">Not-Null&lt;/a> assertions&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/Builder">Builder class generators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://projectlombok.org/features/constructor">Constructor helpers of various sorts&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s also a few more exotic features (which I personally have not seen developers)
use in the wild, but which no doubt &lt;em>someone&lt;/em> is using, including
&lt;a href="https://projectlombok.org/features/SneakyThrows">suppressing checked exceptions&lt;/a>, &lt;a href="https://projectlombok.org/features/GetterLazy">lazy fields&lt;/a>, &lt;a href="https://projectlombok.org/features/val">magic &amp;ldquo;val&amp;rdquo; keyword&lt;/a>, &lt;a href="https://projectlombok.org/features/experimental/Delegate">delegation&lt;/a>, &lt;a href="https://projectlombok.org/features/experimental/Wither">&amp;ldquo;with&amp;quot;ers&lt;/a>, &lt;a href="https://projectlombok.org/features/experimental/UtilityClass">util&lt;/a> and &lt;a href="https://projectlombok.org/features/experimental/Helper">helper&lt;/a> classes.&lt;/p></description></item><item><title>Is Kotlin the new Java?</title><link>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</link><pubDate>Wed, 28 Jun 2017 00:20:27 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/28/is-kotlin-the-new-java/</guid><description>&lt;p>One of the programming languages I&amp;rsquo;ve (essentially) been ignoring for the past
couple of years has been &lt;a href="http://kotlinlang.org/">Kotlin&lt;/a>,
the “better Java” from Jetbrains,
the author of IntelliJ and other IDE&amp;rsquo;s.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>
Recently, Kotlin has come back into focus for me for the following reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://developer.android.com/kotlin/index.html">Google finally announced official Android support for Kotlin&lt;/a>&lt;/li>
&lt;li>Steve Yegge, that infamously opinionated programming language enthusiast,
&lt;a href="http://steve-yegge.blogspot.com/2017/05/why-kotlin-is-better-than-whatever-dumb.html">wrote a patently Yeggian post about how Kotlin scratches his itches&lt;/a>
without supporting academic or impractical features.&lt;/li>
&lt;li>I began to tire (after only a handful of months!!) of diligently reminding my
colleagues to prefer &lt;a href="https://github.com/google/guava/wiki/ImmutableCollectionsExplained">Guava Immutable collections&lt;/a>
over Java collections,
&lt;a href="https://projectlombok.org/features/Value">Lombok&lt;/a>/&lt;a href="https://immutables.github.io/">Immutables&lt;/a> over hand-rolled POJO&amp;rsquo;s, and
&lt;a href="https://stackoverflow.com/questions/13484202/how-to-use-nullable-and-nonnull-annotations-more-effectively">to please please use the &lt;code>@Nullable&lt;/code> and &lt;code>@Nonnull&lt;/code> annotations&lt;/a>
or at the very least &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html">&lt;code>java.util.Optional&lt;/code>&lt;/a>
instead of returning ambiguous types (such as empty/nullable/possibly full collections of possibly null values).&lt;/li>
&lt;/ul>
&lt;h3 id="some-features-need-to-exist-at-the-language-level">Some features need to exist at the language level&lt;/h3>
&lt;p>To paraphrase Jeff Bezos,&lt;/p></description></item><item><title>Clojure and the Esoteric Mysteries of Namespaces</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</link><pubDate>Sun, 18 Jun 2017 13:12:46 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/</guid><description>&lt;p>If you&amp;rsquo;ve ever been programming in Clojure and encountered an error which looks
something like, &lt;code>IllegalStateException(&amp;quot;Can't change/establish root binding of: *ns* with set&amp;quot;)&lt;/code>,
read on!&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces
function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s
“&lt;code>Var&lt;/code>s”. Here is a deep-dive on how they work. This is a two-part
series.
The previous part of the series is available at
&lt;a href="https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/">Clojure and the Esoteric Mysteries of Vars&lt;/a>.&lt;/p></description></item><item><title>Clojure and the Esoteric Mysteries of Vars</title><link>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</link><pubDate>Sun, 18 Jun 2017 11:07:02 -0400</pubDate><guid>https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-vars/</guid><description>&lt;p>I recently had the drive/opportunity to deep-dive on how Clojure&amp;rsquo;s namespaces
function and how they provide a simple abstraction using the concept of Clojure&amp;rsquo;s
“&lt;code>Var&lt;/code>s”. Here is a deep-dive on how they work. This is a two-part
series. The next part of the series is available at
&lt;a href="https://www.justabloginthepark.com/2017/06/18/clojure-and-the-esoteric-mysteries-of-namespaces/">Clojure and the Esoteric Mysteries of Namespaces&lt;/a>.&lt;/p>
&lt;h2 id="vars-a-simplified-model-of-variables">Vars: A Simplified Model of Variables&lt;/h2>
&lt;p>One of Clojure&amp;rsquo;s essential motivations is to provide a hosted runtime for
easily concurrent programs, wherein most of the challenges of locking and
thread-safety are provided “for free” (at least in the sense of
the programmer not having to worry about these low-level concepts). To that end,
Clojure implements its variables differently than most other languages.&lt;/p></description></item><item><title>Bearish on Clojure in 2017</title><link>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</link><pubDate>Sun, 04 Jun 2017 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2017/06/04/bearish-on-clojure-in-2017/</guid><description>&lt;p>There was a recent brouhaha in the Clojure community about
&lt;a href="https://lambdaisland.com/blog/25-05-2017-simple-and-happy-is-clojure-dying-and-what-has-ruby-got-to-do-with-it">the recent blog post&lt;/a>
by a Clojure dabbler to the effect that Clojure may be a clean and beautiful language
but that it fails in a few pragmatic and ergonomic senses which hurts its adoption
and limits its appeal. Although the author admits that he probably made a mistake
in jumping to adopt Clojure, a foreign technological concept to him,
for a startup in a space that was also completely foreign to him, he does bring
up some worthwhile points that are worth chewing over.&lt;/p></description></item><item><title>Switching to Spacemacs As My Default Editor</title><link>https://www.justabloginthepark.com/2016/10/02/switching-to-spacemacs-as-my-default-editor/</link><pubDate>Sun, 02 Oct 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/10/02/switching-to-spacemacs-as-my-default-editor/</guid><description>&lt;p>I recently began to use &lt;a href="https://www.gnu.org/software/emacs/">Emacs&lt;/a>
as my default text editor for most things, having switched from
&lt;a href="https://www.sublimetext.com/">Sublime Text&lt;/a>. Specifically, I&amp;rsquo;m using
the brilliant &lt;a href="https://github.com/syl20bnr/spacemacs">Spacemacs&lt;/a>
project, which can best be described as a fairly comprehensive set of
sensible defaults and plugins for Emacs with a clever plugin architecture.&lt;/p>
&lt;p>I used to be a casual &lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)">VIM&lt;/a>
user for remote file editing and a Sublime Text
user for local editing (with plugins). However, neither of these solutions
truly satisfied me. VIM is tricky to get fully working plugins for,
and a new set of plugins is needed for every target host. Keeping the
VIM plugins in sync is a chore even if effort is dedicated to it.
Sublime is also very nice, and has a better plugins story, but some of
the capabilities don&amp;rsquo;t seem to go far enough in my opinion. After hearing
many good things about Emacs using Spacemacs, I decided to check it out.&lt;/p></description></item><item><title>Lisp Finally Clicked</title><link>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</link><pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/17/lisp-finally-clicked/</guid><description>&lt;p>I&amp;rsquo;ve been meaning to write this post for a couple of weeks now.
There is a story told among programming language enthusiasts that
programming as an art only “clicks” once a programmer understands
the Lisp programming language.
I finally feel like I&amp;rsquo;ve reached that point.
Although I don&amp;rsquo;t think I&amp;rsquo;m an amazing
programmer, I finally feel like I understand the difference between
languages (like Python and Lisp), and why Lisp is often considered
so much more flexible
and powerful (at least in theory) than a language like Python or C.
(For reference, see any of Paul Graham&amp;rsquo;s somewhat self-assured arguments
about Lisp. &lt;a href="http://www.paulgraham.com/avg.html">I like his Blub essay the most.&lt;/a>).&lt;/p></description></item><item><title>How Programming is Like Cooking</title><link>https://www.justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</link><pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2016/01/09/how-programming-is-like-cooking/</guid><description>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Peter_Nau">Peter Naur&lt;/a>,
famous in the programming world for his contributions to
&lt;a href="https://en.wikipedia.org/wiki/ALGOL_60">ALGOL&lt;/a>
and the
&lt;a href="https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form">Backus-Naur Form (BNF)&lt;/a>
notation for expressing grammars,
passed away last week. (For those who are not in the programming world,
ALGOL&amp;rsquo;s grammatical syntax inspired most of today&amp;rsquo;s most popular
programming languages, like C, C++, Java, and Python).
As a very young millennial programmer, I&amp;rsquo;d of course heard Naur&amp;rsquo;s name
from the BNF notation, but didn&amp;rsquo;t really get to appreciate just how prescient
his work was at the time.&lt;/p></description></item><item><title>IaaS and PaaS Explained: A Food Analogy</title><link>https://www.justabloginthepark.com/2015/11/22/iaas-and-paas-explained-a-food-analogy/</link><pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/22/iaas-and-paas-explained-a-food-analogy/</guid><description>&lt;p>The other night, I was meditating about my various options for deploying
applications at work, including
&lt;a href="https://en.wikipedia.org/wiki/Cloud_computing#Infrastructure_as_a_service_.28IaaS.29">“Infrastructure as a Service” (IaaS)&lt;/a>
and
&lt;a href="https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_.28PaaS.29">“Platform as a Service” (PaaS)&lt;/a>.
Amidst my musing, I came up with an analogy for explaining the difference
between these various ways of deploying programming solutions,
in addition to the much more conventional approaches which were used
formerly (and are often still necessary).&lt;/p>
&lt;h2 id="the-analogy">The Analogy&lt;/h2>
&lt;p>Suppose you want to get into the food services industry. You have many
decisions to make, but chief among them is deciding two related things.&lt;/p></description></item><item><title>The Clojure “Reductions” Function</title><link>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</link><pubDate>Tue, 17 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/17/the-clojure-reductions-function/</guid><description>&lt;p>Tonight, while attempting a problem at &lt;a href="http://www.4clojure.com">4 Clojure&lt;/a>
(problem number omitted so as not to give too many hints),
I was struck by the following problem:&lt;/p>
&lt;blockquote>
&lt;p>What if I need a Clojure function which can take a sequence of functions
and can sequentially call them on some seed value?&lt;/p>&lt;/blockquote>
&lt;p>I&amp;rsquo;m specifically looking at something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#66d9ef">defn &lt;/span>some-fun
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [seed-val &lt;span style="color:#f92672">&amp;amp;&lt;/span> funs]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; Keep passing the calculated value through, while also appending to sequence&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (list ((first funs) seed-val) ((second funs) ((first funs) seed-val)) ...))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I ended up hacking something together using
&lt;a href="https://clojuredocs.org/clojure.core/iterate">&lt;code>iterate&lt;/code>&lt;/a>,
but which wasn&amp;rsquo;t
terribly elegant.&lt;/p></description></item><item><title>Clojure Zippers Emulate Object-Oriented Programming?</title><link>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/clojure-zippers-emulate-object-oriented-programming/</guid><description>&lt;p>Yesterday, I posted about using Clojure
&lt;a href="http://clojuredocs.org/clojure.zip/zipper">zippers&lt;/a>
to solve the problem of automatically generating a Table of Contents.
During my work with Clojure&amp;rsquo;s implementation of zippers, I noticed something
interesting.&lt;/p>
&lt;p>The &lt;code>zipper&lt;/code> function creates (and returns) a new zipper object. Its parameters
are the following (lifted straight from the documentation):&lt;/p>
&lt;ol>
&lt;li>&lt;code>branch?&lt;/code> – a function that takes a node of the zipper and returns a
true/false if it is capable of having children (even if it currently
does not).&lt;/li>
&lt;li>&lt;code>children&lt;/code> – a function which, given a node in the zipper which is a
branch, returns a &lt;code>seq&lt;/code> (sequence) of its children.&lt;/li>
&lt;li>&lt;code>make-node&lt;/code> – a function which, given a node and a sequence of its
children, returns a new branch node with the supplied children.&lt;/li>
&lt;li>&lt;code>root&lt;/code> – the root node of the data structure (which can also be
any valid tree that the zipper to be constructed understands).&lt;/li>
&lt;/ol>
&lt;p>At first, this was a bit impenetrable. Why doesn&amp;rsquo;t the zipper just know how
to zip over its data? How many types of zippers are there, exactly?&lt;/p></description></item><item><title>Coding: Debugging the Gender Gap</title><link>https://www.justabloginthepark.com/2015/11/05/coding-debugging-the-gender-gap/</link><pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/05/coding-debugging-the-gender-gap/</guid><description>&lt;p>On Monday, I had the chance to view a private screening of the newish
documentary
&lt;a href="http://www.codedocumentary.com/">“Code: Debugging the Gender Gap”&lt;/a>.
The premise of the documentary,
&lt;a href="http://www.imdb.com/title/tt4335520/plotsummary?ref_=tt_ov_pl">lifted straight from IMDB:&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>CODE documentary exposes the dearth of female and minority software
engineers and explores the reasons for this gender gap and digital divide.
The film highlights breakthrough efforts that are producing more diverse
programmers and shows how this critical gap can be closed. CODE asks: what
would society gain from having more women and people of color code, and how
do we get there?&lt;/p></description></item><item><title>Implementing a Table of Contents Using Zippers</title><link>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</link><pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/11/04/implementing-a-table-of-contents-using-zippers/</guid><description>&lt;p>As I continue my forays with Clojure, I&amp;rsquo;m finding it enjoyable (if not entirely
productive) to hack with it on
&lt;a href="https://github.com/cryogen-project/cryogen">Cryogen&lt;/a>, a nifty little
blog generator
&lt;a href="https://www.justabloginthepark.com/2015/10/24/returning-to-blogging-with-cryogen/">I already discussed recently&lt;/a>.&lt;/p>
&lt;p>On Sunday I had the privilege
&lt;a href="https://github.com/cryogen-project/cryogen-core/pull/51">of making my first pull request&lt;/a>.
The essence of the PR was to fix a
&lt;a href="https://github.com/cryogen-project/cryogen/issues/62">couple of bugs&lt;/a>
with the existing implementation of the logic for generating a Table
of Contents for a given blog post, and also replace a less robust
algorithm (for real-life use cases) with a more robust one.&lt;/p></description></item><item><title>F Sharp vs Clojure Toy Problem Shootout</title><link>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</link><pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/28/f-sharp-vs-clojure-toy-problem-shootout/</guid><description>&lt;p>As a continuation of my forays in interesting and less industrially-oriented
programming languages, I decided to compare
&lt;a href="fsharp.org">F Sharp&lt;/a>
against &lt;a href="clojure.org">Clojure&lt;/a> for a relatively simple programming
problem, and to compare how the two felt in terms of programming ease,
friendliness, and how they each viewed the problem.&lt;/p>
&lt;h2 id="the-problem">The Problem&lt;/h2>
&lt;p>The problem is a relatively one from
&lt;a href="https://reddit.com/r/dailyprogrammer">Reddit&amp;rsquo;s “Daily Programmer” subreddit&lt;/a>, called
&lt;a href="https://www.reddit.com/r/dailyprogrammer/comments/3j3pvm/20150831_challenge_230_easy_json_treasure_hunt/">JSON Treasure Hunt&lt;/a>:
given a random, unstructured JSON object, traverse the object looking for
a specific terminal value (in this case, a string &amp;ldquo;dailyprogrammer&amp;rdquo;).
This is, of course, an unstructured tree traversal question.&lt;/p></description></item><item><title>Pros and Cons of Clojure</title><link>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</link><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2015/10/18/pros-and-cons-of-clojure/</guid><description>&lt;p>As part of my forays in interesting (and generally unusable at work)
programming languages, I began investigating
&lt;a href="clojure.org">Clojure&lt;/a> back in June. Although I really love the
language as a whole (and, in fact, I&amp;rsquo;m using it to power this blog!),
I struggled not only to set it up, but to find its ideal niche.
This essay/rant is a result of a conversation I had about Clojure with
two friends, one who is an excellent polyglot programmer, and one
who is a beginner simply interested in Clojure as a practical Lisp.&lt;/p></description></item><item><title>Multiple Cores and Multithreading</title><link>https://www.justabloginthepark.com/2014/03/09/multiple-cores-and-multithreading/</link><pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2014/03/09/multiple-cores-and-multithreading/</guid><description>&lt;p>Have you ever seen advertisements for the latest computers which promote fancy processors with multi-core processors and
wonder exactly the advantage of having multiple cores is?&lt;/p>
&lt;p>The most tempting explanation, although perhaps too simplistic, is that “more is better”. The most common
mistake is thinking that &lt;em>n cores must run programs n times faster than one core&lt;/em>, ie a four core processor is
approximately four times faster than a single-core processor. Although &lt;em>this has the potential to happen occasionally&lt;/em>,
the true benefits are actually slightly different. First, though, we must understand what a core &lt;em>does&lt;/em>.&lt;/p></description></item><item><title>The Eigenfacebook</title><link>https://www.justabloginthepark.com/2013/11/19/the-eigenfacebook/</link><pubDate>Tue, 19 Nov 2013 00:00:00 +0000</pubDate><guid>https://www.justabloginthepark.com/2013/11/19/the-eigenfacebook/</guid><description>&lt;p>The end of the fall semester is always a very special time of year. The hubbub
of plans for winter break are omnipresent, festive lights illuminate themselves
around campus, and most importantly of all, professors finally get around to
assigning all their term projects with scarcely three weeks left with which to
complete them. This isn&amp;rsquo;t news to my fellow upperclassmen, although the
sophomores may only just begin to experience this for the first time.&lt;/p></description></item></channel></rss>